// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
  GUEST
}

enum AuthProvider {
  EMAIL
  GITHUB
  GOOGLE
}

// Enum para status do projeto
enum ProjectStatus {
  PENDING   // Aguardando aprovação
  APPROVED  // Aprovado e visível
  REJECTED  // Rejeitado pelos moderadores
  ARCHIVED  // Arquivado pelo dono
}

// Enum para status do artigo
enum ArticleStatus {
  PENDING   // Aguardando aprovação
  APPROVED  // Aprovado e visível
  REJECTED  // Rejeitado pelos moderadores
  ARCHIVED  // Arquivado pelo autor
}

// Enum para categorias de TI
enum ArticleCategory {
  FRONTEND     // React, Vue, Angular, HTML, CSS, JS
  BACKEND      // Node.js, Python, Java, .NET, PHP
  MOBILE       // React Native, Flutter, Native
  DEVOPS       // Docker, Kubernetes, AWS, CI/CD
  DATABASE     // SQL, NoSQL, MongoDB, PostgreSQL
  SECURITY     // Cibersegurança, Autenticação
  AI_ML        // Inteligência Artificial, Machine Learning
  BLOCKCHAIN   // Criptomoedas, Smart Contracts
  CAREER       // Carreira em TI, Soft Skills
  TOOLS        // IDEs, Ferramentas, Produtividade
  ARCHITECTURE // Clean Architecture, Design Patterns
  OTHER        // Outros tópicos
}

model Article {
  id          String         @id @default(uuid())
  titulo      String
  slug        String         @unique // URL amigável gerada do título
  descricao   String         // Resumo/subtítulo do artigo
  conteudo    String         @db.Text // Conteúdo completo em markdown
  categoria   ArticleCategory
  tags        String[]       // Array de tags
  status      ArticleStatus  @default(PENDING)
  
  // Métricas do artigo
  visualizacoes         Int      @default(0)
  tempoLeituraMinutos   Int?     // Calculado automaticamente
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Para soft delete
  isActive    Boolean   @default(true)
  
  // Relacionamentos
  authorId    String
  author      User      @relation("ArticleAuthor", fields: [authorId], references: [id])
  
  // Moderação
  approvedById String?   // Qual moderador aprovou
  approvedBy   User?     @relation("ArticleApprover", fields: [approvedById], references: [id])
  approvedAt   DateTime? // Quando foi aprovado
  rejectionReason String? @db.Text // Motivo da rejeição, se houver
  
  // Imagens do artigo
  images       ArticleImage[]
  
  @@map("articles")
  @@index([status])
  @@index([categoria])
  @@index([authorId])
  @@index([createdAt])
  @@index([visualizacoes])
}

model ArticleImage {
  id        String   @id @default(uuid())
  articleId String
  filename  String
  type      ImageType
  size      Int?     // Tamanho em bytes
  width     Int?     // Largura em pixels
  height    Int?     // Altura em pixels
  
  // Armazenamento da imagem
  base64    String?  @db.Text // Para armazenar base64 (apenas para imagens pequenas)
  url       String?  // URL externa (S3, Cloudinary, etc.)
  alt       String?  // Texto alternativo para acessibilidade
  
  // Metadados adicionais
  metadata  Json?    // Informações extras como EXIF, etc.
  
  // Ordenação
  order     Int      @default(0) // Para ordenar as imagens
  isMain    Boolean  @default(false) // Imagem principal do artigo
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamento
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_images")
}

model User {
  id           String       @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  name         String
  email        String       @unique
  avatar       String?      // URL do avatar
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  roles        UserRole[]   @default([USER])
  isActive     Boolean      @default(true)
  emailVerified Boolean     @default(false)
  
  // Relacionamentos com diferentes provedores de autenticação
  emailAuth     EmailAuth?
  githubAccount GitHubAccount?
  googleAccount GoogleAccount?

  // Relacionamentos com projetos
  ownedProjects     Project[]            @relation("ProjectOwner")
  approvedProjects  Project[]            @relation("ProjectApprover")
  
  // Relacionamentos com participantes
  participations    ProjectParticipant[] @relation("UserParticipant")
  addedParticipants ProjectParticipant[] @relation("ParticipantAdder")

  // ✅ ADICIONAR: Relacionamentos com artigos
  authoredArticles  Article[] @relation("ArticleAuthor")
  approvedArticles  Article[] @relation("ArticleApprover")

  @@map("users")
}

model Project {
  id          String        @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  name        String
  description String
  status      ProjectStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?     // Soft delete
  
  // Relacionamentos
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  
  // Moderação
  approvedById String?      // Qual moderador aprovou
  approvedBy   User?        @relation("ProjectApprover", fields: [approvedById], references: [id])
  approvedAt   DateTime?    // Quando foi aprovado
  rejectionReason String?   // Motivo da rejeição, se houver
  
  // Participantes do projeto
  participants ProjectParticipant[]
  images       ProjectImage[]

  @@map("projects")
}

enum ImageType {
  JPG
  JPEG
  PNG
  WEBP
  GIF
  SVG
}

model ProjectImage {
  id        String   @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  projectId String
  filename  String
  type      ImageType
  size      Int?     // Tamanho em bytes
  width     Int?     // Largura em pixels
  height    Int?     // Altura em pixels
  
  // Armazenamento da imagem
  base64    String?  @db.Text // Para armazenar base64 (apenas para imagens pequenas)
  url       String?  // URL externa (S3, Cloudinary, etc.)
  
  // Metadados adicionais (JSON)
  metadata  Json?    // Informações extras como EXIF, configurações, etc.
  
  // Ordenação e configuração
  order     Int      @default(0) // Para ordenar as imagens
  isMain    Boolean  @default(false) // Imagem principal do projeto
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamento
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_images")
}

model ProjectParticipant {
  id        String   @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  projectId String
  userId    String
  addedById String
  role      String?  // "COLLABORATOR", "DESIGNER", "DEVELOPER", etc.
  joinedAt  DateTime @default(now())
  
  // Relacionamentos
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation("UserParticipant", fields: [userId], references: [id])
  addedBy   User     @relation("ParticipantAdder", fields: [addedById], references: [id])

  @@unique([projectId, userId]) // Um usuário só pode participar uma vez do mesmo projeto
  @@map("project_participants")
}

// Autenticação por email/senha
model EmailAuth {
  id        String   @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  userId    String   @unique
  password  String   // Hash da senha
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_auth")
}

// Autenticação GitHub
model GitHubAccount {
  id                   String    @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  userId               String    @unique
  githubId             String    @unique // ID do usuário no GitHub
  username             String    // Login do GitHub
  bio                  String?   // Biografia
  publicRepos          Int       @default(0)
  followers            Int       @default(0)
  following            Int       @default(0)
  githubAccessToken    String?   // Token para API calls
  githubRefreshToken   String?   // Se disponível
  tokenExpiresAt       DateTime?
  lastSyncAt           DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relacionamento com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("github_accounts")
  @@index([githubId])
  @@index([userId])
}

// Autenticação Google
model GoogleAccount {
  id                   String    @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  userId               String    @unique
  googleId             String    @unique // ID do usuário no Google
  googleEmail          String    // Email do Google (pode ser diferente do email principal)
  googleAccessToken    String?   // Token para API calls
  googleRefreshToken   String?   // Refresh token
  tokenExpiresAt       DateTime?
  picture              String?   // URL da foto do perfil do Google
  locale               String?   // Localização
  lastSyncAt           DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relacionamento com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("google_accounts")
  @@index([googleId])
  @@index([userId])
}

// Tabela opcional para rastrear tentativas de login
model LoginAttempt {
  id            String      @id @default(uuid()) // ✅ Mudou de cuid() para uuid()
  userId        String?     // Nullable para tentativas com usuários inexistentes
  email         String
  provider      AuthProvider
  success       Boolean
  ipAddress     String?
  userAgent     String?
  failureReason String?     // Razão da falha (senha errada, usuário não encontrado, etc.)
  createdAt     DateTime    @default(now())

  @@map("login_attempts")
  @@index([email])
  @@index([userId])
  @@index([createdAt])
}