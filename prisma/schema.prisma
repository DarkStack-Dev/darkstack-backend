// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
  GUEST
}

enum AuthProvider {
  EMAIL
  GITHUB
  GOOGLE
}

// Enum para status do projeto
enum ProjectStatus {
  PENDING   // Aguardando aprova√ß√£o
  APPROVED  // Aprovado e vis√≠vel
  REJECTED  // Rejeitado pelos moderadores
  ARCHIVED  // Arquivado pelo dono
}

// Enum para status do artigo
enum ArticleStatus {
  PENDING   // Aguardando aprova√ß√£o
  APPROVED  // Aprovado e vis√≠vel
  REJECTED  // Rejeitado pelos moderadores
  ARCHIVED  // Arquivado pelo autor
}

// Enum para categorias de TI
enum ArticleCategory {
  FRONTEND     // React, Vue, Angular, HTML, CSS, JS
  BACKEND      // Node.js, Python, Java, .NET, PHP
  MOBILE       // React Native, Flutter, Native
  DEVOPS       // Docker, Kubernetes, AWS, CI/CD
  DATABASE     // SQL, NoSQL, MongoDB, PostgreSQL
  SECURITY     // Ciberseguran√ßa, Autentica√ß√£o
  AI_ML        // Intelig√™ncia Artificial, Machine Learning
  BLOCKCHAIN   // Criptomoedas, Smart Contracts
  CAREER       // Carreira em TI, Soft Skills
  TOOLS        // IDEs, Ferramentas, Produtividade
  ARCHITECTURE // Clean Architecture, Design Patterns
  OTHER        // Outros t√≥picos
}

model Article {
  id          String         @id @default(uuid())
  titulo      String
  slug        String         @unique // URL amig√°vel gerada do t√≠tulo
  descricao   String         // Resumo/subt√≠tulo do artigo
  conteudo    String         @db.Text // Conte√∫do completo em markdown
  categoria   ArticleCategory
  tags        String[]       // Array de tags
  status      ArticleStatus  @default(PENDING)
  // ‚úÖ NOVOS CAMPOS - Contadores de coment√°rios
  commentsCount    Int       @default(0)
  
  // M√©tricas do artigo
  visualizacoes         Int      @default(0)
  tempoLeituraMinutos   Int?     // Calculado automaticamente
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // Para soft delete
  isActive    Boolean   @default(true)
  
  // Relacionamentos
  authorId    String
  author      User      @relation("ArticleAuthor", fields: [authorId], references: [id])
  
  // Modera√ß√£o
  approvedById String?   // Qual moderador aprovou
  approvedBy   User?     @relation("ArticleApprover", fields: [approvedById], references: [id])
  approvedAt   DateTime? // Quando foi aprovado
  rejectionReason String? @db.Text // Motivo da rejei√ß√£o, se houver
  
  // Imagens do artigo
  images       ArticleImage[]

  // üîó Relacionamento com coment√°rios
  comments         Comment[] @relation("ArticleComments")
  
  @@map("articles")
  @@index([status])
  @@index([categoria])
  @@index([authorId])
  @@index([createdAt])
  @@index([visualizacoes])
}

model ArticleImage {
  id        String   @id @default(uuid())
  articleId String
  filename  String
  type      ImageType
  size      Int?     // Tamanho em bytes
  width     Int?     // Largura em pixels
  height    Int?     // Altura em pixels
  
  // Armazenamento da imagem
  base64    String?  @db.Text // Para armazenar base64 (apenas para imagens pequenas)
  url       String?  // URL externa (S3, Cloudinary, etc.)
  alt       String?  // Texto alternativo para acessibilidade
  
  // Metadados adicionais
  metadata  Json?    // Informa√ß√µes extras como EXIF, etc.
  
  // Ordena√ß√£o
  order     Int      @default(0) // Para ordenar as imagens
  isMain    Boolean  @default(false) // Imagem principal do artigo

  // ‚úÖ CORRIGIDO - Contadores de coment√°rios E likes
  commentsCount    Int       @default(0)
  // ‚úÖ NOVOS CAMPOS - Contadores de likes
  likesCount      Int       @default(0)
  dislikesCount   Int       @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamento
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_images")
}

model User {
  id           String       @id @default(uuid()) // ‚úÖ Mudou de cuid() para uuid()
  name         String
  email        String       @unique
  avatar       String?      // URL do avatar
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  roles        UserRole[]   @default([USER])
  isActive     Boolean      @default(true)
  emailVerified Boolean     @default(false)
  
  // Relacionamentos com diferentes provedores de autentica√ß√£o
  emailAuth     EmailAuth?
  githubAccount GitHubAccount?
  googleAccount GoogleAccount?

  // Relacionamentos com projetos
  ownedProjects     Project[]            @relation("ProjectOwner")
  approvedProjects  Project[]            @relation("ProjectApprover")
  
  // Relacionamentos com participantes
  participations    ProjectParticipant[] @relation("UserParticipant")
  addedParticipants ProjectParticipant[] @relation("ParticipantAdder")

  // ‚úÖ NOVO RELACIONAMENTO - Likes dados pelo usu√°rio
  givenLikes      Like[]    @relation("UserLikes")

  // ‚úÖ ADICIONAR: Relacionamentos com artigos
  authoredArticles  Article[] @relation("ArticleAuthor")
  approvedArticles  Article[] @relation("ArticleApprover")

  receivedNotifications  Notification[] @relation()
  createdNotifications   Notification[] @relation("NotificationCreator")

  // üîó Relacionamentos com coment√°rios
  comments         Comment[] @relation("CommentAuthor")
  moderatedComments Comment[] @relation("CommentModerator")

  @@map("users")
}

model Project {
  id          String        @id @default(uuid()) // ‚úÖ Mudou de cuid() para uuid()
  name        String
  description String
  status      ProjectStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?     // Soft delete
  
  // Relacionamentos
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  
  // Modera√ß√£o
  approvedById String?      // Qual moderador aprovou
  approvedBy   User?        @relation("ProjectApprover", fields: [approvedById], references: [id])
  approvedAt   DateTime?    // Quando foi aprovado
  rejectionReason String?   // Motivo da rejei√ß√£o, se houver
  
  // Participantes do projeto
  participants ProjectParticipant[]
  images       ProjectImage[]

  // ‚úÖ NOVOS CAMPOS - Contadores de likes  
  likesCount      Int       @default(0)
  dislikesCount   Int       @default(0)

  // ‚úÖ NOVOS CAMPOS - Contadores de coment√°rios
  commentsCount    Int       @default(0)
  
  // üîó Relacionamento com coment√°rios
  comments         Comment[] @relation("ProjectComments")

  @@map("projects")
}

enum ImageType {
  JPG
  JPEG
  PNG
  WEBP
  GIF
  SVG
}

model ProjectImage {
  id        String   @id @default(uuid()) // ‚úÖ Mudou de cuid() para uuid()
  projectId String
  filename  String
  type      ImageType
  size      Int?     // Tamanho em bytes
  width     Int?     // Largura em pixels
  height    Int?     // Altura em pixels
  
  // Armazenamento da imagem
  base64    String?  @db.Text // Para armazenar base64 (apenas para imagens pequenas)
  url       String?  // URL externa (S3, Cloudinary, etc.)
  
  // Metadados adicionais (JSON)
  metadata  Json?    // Informa√ß√µes extras como EXIF, configura√ß√µes, etc.
  
  // Ordena√ß√£o e configura√ß√£o
  order     Int      @default(0) // Para ordenar as imagens
  isMain    Boolean  @default(false) // Imagem principal do projeto
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamento
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_images")
}

model ProjectParticipant {
  id        String   @id @default(uuid()) // ‚úÖ Mudou de cuid() para uuid()
  projectId String
  userId    String
  addedById String
  role      String?  // "COLLABORATOR", "DESIGNER", "DEVELOPER", etc.
  joinedAt  DateTime @default(now())
  
  // Relacionamentos
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation("UserParticipant", fields: [userId], references: [id])
  addedBy   User     @relation("ParticipantAdder", fields: [addedById], references: [id])

  @@unique([projectId, userId]) // Um usu√°rio s√≥ pode participar uma vez do mesmo projeto
  @@map("project_participants")
}

// Autentica√ß√£o por email/senha
model EmailAuth {
  id        String   @id @default(uuid()) // ‚úÖ Mudou de cuid() para uuid()
  userId    String   @unique
  password  String   // Hash da senha
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_auth")
}

// Autentica√ß√£o GitHub
model GitHubAccount {
  id                   String    @id @default(uuid()) // ‚úÖ Mudou de cuid() para uuid()
  userId               String    @unique
  githubId             String    @unique // ID do usu√°rio no GitHub
  username             String    // Login do GitHub
  bio                  String?   // Biografia
  publicRepos          Int       @default(0)
  followers            Int       @default(0)
  following            Int       @default(0)
  githubAccessToken    String?   // Token para API calls
  githubRefreshToken   String?   // Se dispon√≠vel
  tokenExpiresAt       DateTime?
  lastSyncAt           DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relacionamento com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("github_accounts")
  @@index([githubId])
  @@index([userId])
}

// Autentica√ß√£o Google
model GoogleAccount {
  id                   String    @id @default(uuid()) // ‚úÖ Mudou de cuid() para uuid()
  userId               String    @unique
  googleId             String    @unique // ID do usu√°rio no Google
  googleEmail          String    // Email do Google (pode ser diferente do email principal)
  googleAccessToken    String?   // Token para API calls
  googleRefreshToken   String?   // Refresh token
  tokenExpiresAt       DateTime?
  picture              String?   // URL da foto do perfil do Google
  locale               String?   // Localiza√ß√£o
  lastSyncAt           DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relacionamento com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("google_accounts")
  @@index([googleId])
  @@index([userId])
}

// Adicionar ao prisma/schema.prisma

// Atualizar o modelo User adicionando:
// receivedNotifications  Notification[] @relation()
// createdNotifications   Notification[] @relation("NotificationCreator")

enum NotificationType {
  ARTICLE_PENDING       // Novo artigo aguardando modera√ß√£o
  ARTICLE_APPROVED      // Artigo aprovado
  ARTICLE_REJECTED      // Artigo rejeitado
  PROJECT_PENDING       // Novo projeto aguardando modera√ß√£o
  PROJECT_APPROVED      // Projeto aprovado
  PROJECT_REJECTED      // Projeto rejeitado
  SYSTEM_ANNOUNCEMENT   // An√∫ncio do sistema
}

model Notification {
  id          String           @id @default(uuid())
  type        NotificationType
  title       String           // T√≠tulo da notifica√ß√£o
  message     String           @db.Text // Mensagem completa
  isRead      Boolean          @default(false)
  
  // Dados do item relacionado (artigo/projeto)
  relatedId   String?          // ID do artigo ou projeto relacionado
  relatedType String?          // "ARTICLE" ou "PROJECT"
  
  // Metadados adicionais
  metadata    Json?            // Dados extras como URLs, etc.
  
  // Timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  readAt      DateTime?        // Quando foi lida
  deletedAt   DateTime?        // Para soft delete
  
  // Relacionamentos
  userId      String           // Quem vai receber a notifica√ß√£o
  user        User             @relation(fields: [userId], references: [id])
  
  // Quem gerou a notifica√ß√£o (opcional)
  createdById String?
  createdBy   User?            @relation("NotificationCreator", fields: [createdById], references: [id])

  @@map("notifications")
  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
}

// üìù MODELO PRINCIPAL DE COMENT√ÅRIOS
model Comment {
  id               String         @id @default(uuid())
  content          String         @db.Text
  isEdited         Boolean        @default(false)
  isDeleted        Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // üîó Relacionamentos base
  authorId         String
  author           User           @relation("CommentAuthor", fields: [authorId], references: [id])
  
  // üîÅ Sistema de threads (coment√°rios encadeados)
  parentId         String?
  parent           Comment?       @relation("CommentThread", fields: [parentId], references: [id])
  replies          Comment[]      @relation("CommentThread")
  repliesCount     Int            @default(0) // Contador de respostas diretas
  
  // üìé Entidade relacionada (polim√≥rfico)
  targetId         String         // ID do item (article, project, etc.)
  targetType       CommentTarget  // Tipo do item
  
  // ‚úÖ Sistema de modera√ß√£o
  approved         Boolean        @default(true)
  approvedById     String?
  approvedBy       User?          @relation("CommentModerator", fields: [approvedById], references: [id])
  approvedAt       DateTime?
  rejectionReason  String?        @db.Text
  
  // ‚úÖ NOVOS CAMPOS - Contadores de likes
  likesCount      Int       @default(0)
  dislikesCount   Int       @default(0)

  article  Article? @relation("ArticleComments", fields: [targetId], references: [id], map: "fk_comment_article")
  project  Project? @relation("ProjectComments", fields: [targetId], references: [id], map: "fk_comment_project")

  @@map("comments")
  @@index([targetType, targetId]) // Index composto para buscar por entidade
  @@index([authorId])             // Index para buscar por autor
  @@index([parentId])             // Index para threads
  @@index([createdAt])            // Index para ordena√ß√£o temporal
  @@index([approved])             // Index para modera√ß√£o
}

// üéØ Enum para tipos de coment√°rios
enum CommentTarget {
  ARTICLE
  PROJECT
  ISSUE
  QA
}

// ‚úÖ ADICIONAR AO FINAL DO prisma/schema.prisma

// üëç SISTEMA DE LIKES GEN√âRICO
model Like {
  id          String         @id @default(uuid())
  userId      String         // Quem deu o like
  targetId    String         // ID da entidade (article, project, comment, etc.)
  targetType  LikeTarget     // Tipo da entidade
  isLike      Boolean        @default(true) // true = like, false = dislike
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // üîó Relacionamentos
  user        User           @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  
  // üö´ CONSTRAINT: Um usu√°rio s√≥ pode dar um like por entidade
  @@unique([userId, targetId, targetType], name: "unique_user_like")
  @@map("likes")
  @@index([targetType, targetId]) // Index para buscar likes por entidade
  @@index([userId])               // Index para buscar likes por usu√°rio
  @@index([createdAt])           // Index para ordena√ß√£o temporal
}

// üéØ Enum para tipos de likes
enum LikeTarget {
  ARTICLE
  PROJECT
  COMMENT
  USER_PROFILE
  ISSUE
  QA
}